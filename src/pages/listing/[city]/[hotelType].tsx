import { LoadingSpinner } from "@/components/LoadingSpinner";
import { Navbar } from "@/components/Navbar";
import { MobileListing } from "@/mobile/listing";
import { appRouter } from "@/server/api/root";
import { api } from "@/utils/api";
import { CLASSIC_HOTEL, HOURLY_HOTEL, MIN_WIDTH } from "@/utils/constants";
import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { prisma } from "@/server/db";
import type { GetServerSidePropsContext, InferGetStaticPropsType } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { toast } from "react-hot-toast";
import superjson from "superjson";

export default function Listing(
  props: InferGetStaticPropsType<typeof getStaticProps>
) {
  const { city, hotelType } = props;
  const [windowWidth, setWindowWidth] = useState(0);

  useEffect(() => {
    const width = window.innerWidth;
    setWindowWidth(width);
    return () => {
      toast.dismiss();
    };
  }, [windowWidth]);

  const { data, isLoading } = api.hotel.getAllByCity.useQuery({
    city: city,
    hotelType: hotelType,
  });

  if (isLoading) return <LoadingSpinner />;

  return (
    <>
      <Head>
        <title>
          {hotelType === CLASSIC_HOTEL ? "Book Hotels" : "Hourly Hotels"} in{" "}
          {city}
        </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {windowWidth < MIN_WIDTH ? (
        <MobileListing data={data} hotelType={hotelType} />
      ) : (
        <>
          <Navbar isListingPage={true} />
          <main>
            <h1>hi</h1>
          </main>
        </>
      )}
    </>
  );
}

export const getStaticProps = async (context: GetServerSidePropsContext) => {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: { prisma },
    transformer: superjson,
  });
  const city = context.params?.city as string;
  const hotelType = context.params?.hotelType as string;
  await ssg.hotel.getAllByCity.prefetch({ city, hotelType });
  return {
    props: {
      trpcState: ssg.dehydrate(),
      city,
      hotelType,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [
      { params: { city: "Bangalore", hotelType: CLASSIC_HOTEL } },
      { params: { city: "Bangalore", hotelType: HOURLY_HOTEL } },
    ],
    fallback: false,
  };
};
