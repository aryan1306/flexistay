import Image from "next/image";
import { TfiLocationPin, TfiMapAlt } from "react-icons/tfi";
import { BiWater } from "react-icons/bi";
import { TbAirConditioning } from "react-icons/tb";
import { IoRestaurantOutline } from "react-icons/io5";
import { AiOutlineWifi } from "react-icons/ai";
import { SlScreenDesktop } from "react-icons/sl";
import { Navbar } from "@/components/Navbar";
import type { GetServerSidePropsContext, InferGetStaticPropsType } from "next";
import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { appRouter } from "@/server/api/root";
import { prisma } from "@/server/db";
import superjson from "superjson";
import { api } from "@/utils/api";
import { LoadingSpinner } from "@/components/LoadingSpinner";
import Head from "next/head";
import { RUPEE_SYMBOL } from "@/utils/constants";
import { Fragment, useState } from "react";
import { Transition, Dialog } from "@headlessui/react";

export const getStaticProps = async (
  context: GetServerSidePropsContext<{ id: string }>
) => {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: { prisma },
    transformer: superjson,
  });
  const id = context.params?.id as string;
  await ssg.hotel.getById.prefetch({ id });
  return {
    props: {
      trpcState: ssg.dehydrate(),
      id,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default function Hotel(
  props: InferGetStaticPropsType<typeof getStaticProps>
) {
  const [isOpen, setIsOpen] = useState(false);
  const { id } = props;
  const { data, isLoading } = api.hotel.getById.useQuery({ id });
  if (isLoading) return <LoadingSpinner />;

  const renderIcons = (item: string, className: string) => {
    switch (item) {
      case "WIFI":
        return <AiOutlineWifi className={className} />;
      case "AC":
        return <TbAirConditioning className={className} />;
      case "RESTAURANT":
        return <IoRestaurantOutline className={className} />;
      case "HOT WATER":
        return <BiWater className={className} />;
      case "TV":
        return <SlScreenDesktop className={className} />;
      default:
        return <></>;
    }
  };

  function closeModal() {
    setIsOpen(false);
  }

  function openModal() {
    setIsOpen(true);
  }

  return (
    <>
      <Head>
        <title>{data?.name} - Flexistay</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar mobile={true} />
      <div className="mx-3">
        <div className="carousel-center carousel rounded-box mt-6 max-w-md space-x-4 bg-red-100 p-4 md:w-full">
          {/* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call */}
          {data?.images.map((img) => (
            <div key={img} className="carousel-item">
              <Image
                src={img}
                width={290}
                height={190}
                className="rounded-box"
                alt={data.name}
              />
            </div>
          ))}
        </div>
        <div className="mt-4 px-1">
          <h1 className="text-2xl font-semibold">{data?.name}</h1>
          <div className="mt-2 flex items-center">
            <TfiLocationPin />
            <p className="ml-1 text-slate-500">
              {data?.address1}, {data?.address2}, {data?.district}
            </p>
          </div>
          <div className="mt-1 flex items-center">
            <TfiMapAlt />
            <a
              href="https://maps.google.com"
              target="_blank"
              className="ml-1 hover:text-brand-primary hover:underline"
            >
              View on Maps
            </a>
          </div>
          <hr className="my-5 bg-slate-400" />
          <Transition show={isOpen} as={Fragment}>
            <Dialog as="div" className="relative z-10" onClose={closeModal}>
              <Transition.Child
                as={Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0"
                enterTo="opacity-100"
                leave="ease-in duration-200"
                leaveFrom="opacity-100"
                leaveTo="opacity-0"
              >
                <div className="fixed inset-0 bg-black bg-opacity-25" />
              </Transition.Child>

              <div className="fixed inset-0 overflow-y-auto">
                <div className="flex min-h-full items-center justify-center p-4 text-center">
                  <Transition.Child
                    as={Fragment}
                    enter="ease-out duration-300"
                    enterFrom="opacity-0 scale-95"
                    enterTo="opacity-100 scale-100"
                    leave="ease-in duration-200"
                    leaveFrom="opacity-100 scale-100"
                    leaveTo="opacity-0 scale-95"
                  >
                    <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                      <div className="mt-4">
                        <button
                          type="button"
                          className="inline-flex justify-center rounded-md border border-transparent bg-blue-100 px-4 py-2 text-sm font-medium text-blue-900 hover:bg-blue-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
                          onClick={closeModal}
                        >
                          Got it, thanks!
                        </button>
                      </div>
                    </Dialog.Panel>
                  </Transition.Child>
                </div>
              </div>
            </Dialog>
          </Transition>
          <h1 className="text-xl font-semibold">Amenities</h1>
          <div className="my-4 grid grid-flow-row grid-cols-2 place-items-start">
            {data?.facilities.map((item) => (
              <div key={item} className="mb-2 flex items-center">
                {renderIcons(item.toUpperCase(), "text-lg")}
                <span className="ml-2 text-lg text-black">
                  {item.charAt(0).toUpperCase() + item.slice(1)}
                </span>
              </div>
            ))}
          </div>
          <hr className="my-5 bg-slate-400" />
        </div>
      </div>
      <div className="btm-nav btm-nav-lg rounded-t-md drop-shadow-2xl">
        <div>
          <span className="text-xs">4 hours</span>
          <div className="flex items-center">
            {/* eslint-disable-next-line @typescript-eslint/restrict-template-expressions */}
            <p className="text-xl font-bold">{`${RUPEE_SYMBOL}${data?.fourHourPrice}`}</p>
            {/* eslint-disable-next-line @typescript-eslint/restrict-template-expressions */}
            <p className="ml-1 text-sm line-through">{`${RUPEE_SYMBOL}${data?.originalPrice}`}</p>
          </div>
        </div>
        <span
          onClick={openModal}
          className="tracking-tighter text-brand-primary"
        >
          Change Slot
        </span>
        <div className="w-full">
          {/* eslint-disable-next-line @typescript-eslint/restrict-template-expressions */}
          <button className="h-10 w-[85%] self-center justify-self-center rounded-md bg-brand-primary text-white shadow-lg">
            Book Now
          </button>
        </div>
      </div>
    </>
  );
}
